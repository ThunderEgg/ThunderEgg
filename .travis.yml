language: cpp

os: linux
dist: bionic
apt:
  sources:
    - sourceline: 'ppa:scottaiton/thunderegg-deps'
jobs:
  include:
  - compiler: clang
    addons:
      apt:
        packages:
          - cmake
          - libfftw3-dev
          - libopenmpi-dev
          - openmpi-bin
          - petsc-dev
          - libblas-dev
          - liblapack-dev
          - libtrilinos-zoltan-dev
  - compiler: gcc
    env:
      global:
        - GH_REPO_NAME: thunderegg.github.io
        - DOXYFILE: $TRAVIS_BUILD_DIR/Doxyfile
        - GH_REPO_REF: github.com/ThunderEgg/thunderegg.github.io.git
        - GH_SUB_DIR: docs/$TRAVIS_BRANCH
    addons:
      sonarcloud:
          organization: "thunderegg"
      apt:
        packages:
          - cmake
          - libfftw3-dev
          - libopenmpi-dev
          - openmpi-bin
          - petsc-dev
          - libblas-dev
          - liblapack-dev
          - libtrilinos-zoltan-dev
          - doxygen
    before_script:
        - export BUILD_WRAPPER="build-wrapper-linux-x86-64 --out-dir bw-output"
        - export CXXFLAGS="-fprofile-arcs -ftest-coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
        - export LDFLAGS="-lgcov"
    after_script: 
        - gcovr --exclude-unreachable-branches --exclude-throw-branches -f src/ -b --sonarqube coverage.xml
        - sonar-scanner
    deploy:
      provider: script
      script: bash TravisScripts/DeployDocs.sh
      on:
        all_branches: true
        condition: $TRAVIS_BRANCH == "develop-wip" || $TRAVIS_BRANCH == "develop"
  - compiler: gcc
    addons:
      apt:
        packages:
          - cmake
          - libopenmpi-dev
          - openmpi-bin
          - petsc-dev
          - libblas-dev
          - liblapack-dev
          - libtrilinos-zoltan-dev
  - compiler: gcc
    addons:
      apt:
        packages:
          - cmake
          - libfftw3-dev
          - libopenmpi-dev
          - openmpi-bin
          - libblas-dev
          - liblapack-dev
          - libtrilinos-zoltan-dev
before_install:
  - pip install --user cpp-coveralls
  - pip install --user gcovr
  - export CXXFLAGS="-std=c++11"
script:
  - export CXXFLAGS="-g -O0 -Wall -W $CXXFLAGS"
  - echo $CXXFLAGS
  - cmake .
  - $BUILD_WRAPPER make
  - ctest --output-on-failure