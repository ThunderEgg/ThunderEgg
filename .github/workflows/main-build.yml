name: Main ThunderEgg Build / Test / Analyze
on:
  push:
    paths-ignore:
      - '.github/workflows/doxygen.yml'
  pull_request:

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  CTEST_PARALLEL_LEVEL: 4
  ubuntu_pkg: "libfftw3-dev libopenmpi-dev openmpi-bin libpetsc-real-dev libblas-dev liblapack-dev"
  brew_pkg: "open-mpi fftw petsc"

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
        - name: "gcc"
          preset: "ci"
          analyze: false
        - name: "clang"
          preset: "ci-clang"
          analyze: true

    name: ${{ matrix.name }} Build on Linux

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install ${{ env.ubuntu_pkg }} ccache

    - name: Install LLVM deps
      if: ${{ matrix.analyze }}
      run: sudo apt-get install llvm-11

    - name: Prepare cache timestamp
      id: cache_timestamp
      run: |
        echo "timestamp=`date "+%Y-%m-%d-%H:%M:%S"`" >> $GITHUB_OUTPUT

    - name: ccache cache files
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ matrix.name }}-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.name }}-ccache-

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ${{ matrix.name }} workflow
      run: cmake --workflow --preset ${{ matrix.preset }}

    - name: log if fail
      if: failure()
      run: cat out/build/${{ matrix.preset }}/CMakeFiles/CMakeConfigureLog.yaml

    - name: Generate Coverage Report
      if: ${{ matrix.analyze }}
      run: |
        llvm-profdata-11 merge \
          -sparse out/test/${{ matrix.preset }}/test.profraw.* \
          -o test.profdata
        llvm-cov-11 show \
          --instr-profile=test.profdata \
          -object out/build/${{ matrix.preset }}/test/unit_tests_mpi1 \
          -object out/build/${{ matrix.preset }}/test/unit_tests_mpi2 \
          -object out/build/${{ matrix.preset }}/test/unit_tests_mpi3 \
          --ignore-filename-regex="((test|out|tpl)/.*)" \
          > coverage.txt

    - name: Upload to codecov.io
      if: ${{ matrix.analyze }}
      run: bash <(curl -s https://codecov.io/bash)


  old-gcc:
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    strategy:
      matrix:
        gcc-version: [8]

    env:
      CC: gcc-${{ matrix.gcc-version }}
      CXX: g++-${{ matrix.gcc-version }}

    steps:

    - name: install compilers
      run: sudo apt install --no-install-recommends ${{ env.CC }} ${{ env.CXX }}

    - name: Install dependencies
      run: sudo apt-get install ${{ env.ubuntu_pkg }}

    - uses: actions/checkout@v4

    - name: CMake workflow
      run: cmake --workflow --preset default


  gcc:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        gcc-version: [9, 13]

    env:
      CC: gcc-${{ matrix.gcc-version }}
      CXX: g++-${{ matrix.gcc-version }}

    steps:

    - name: Install dependencies
      run: sudo apt-get install ${{ env.ubuntu_pkg }}

    - uses: actions/checkout@v4

    - name: CMake workflow
      run: cmake --workflow --preset default


  macos:
    runs-on: macos-latest
    timeout-minutes: 15

    steps:

    - name: Install dependencies
      run: brew install ${{ env.brew_pkg }}

    - uses: actions/checkout@v4

    - name: CMake workflow
      run: cmake --workflow --preset default
